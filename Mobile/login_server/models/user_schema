// user.js
const bcrypt = require('bcrypt');
const Mongoose = require("mongoose")
const UserSchema = new Mongoose.Schema({
  username: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    // validate: {
    //   validator: function (value) {
    //     return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
    //   },
    //   message: 'Invalid email address format',
    // },
  },
  password: {
    type: String,
    minlength: 6,
    required: true,
  },
  cnf_password: {
    type: String,
    minlength: 6,
    required: true,
  },
  dateOfBirth: {
    type: Date,
    required: true,
    trim: true,
}
});
// Middleware to hash the password before saving
UserSchema.pre('save', async function(next) {
    const user = this;
    if (!user.isModified('password')) return next();
    if (user.password !== user.cnf_password) {
        return next(new Error('Password confirmation does not match'));
    }
    const salt = await bcrypt.genSalt(10);
    const hash = await bcrypt.hash(user.password, salt);
    
    const salt1 = await bcrypt.genSalt(20);
    const hash_C = await bcrypt.hash(user.cnf_password, salt1);
    user.password = hash;
    user.cnf_password=hash_C;
    next();
});
const User = Mongoose.model('User', UserSchema);

module.exports = User;